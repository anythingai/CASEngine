version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: cultural-arbitrage-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://web:3000}
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY=${API_KEY}
      
      # Azure OpenAI
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_DEPLOYMENT=${AZURE_OPENAI_DEPLOYMENT:-o4-mini}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2025-01-01-preview}
      
      # Crypto/NFT APIs
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - OPENSEA_API_KEY=${OPENSEA_API_KEY}
      
      # Social Media APIs
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - TWITTER_ACCESS_TOKEN=${TWITTER_ACCESS_TOKEN}
      - TWITTER_ACCESS_TOKEN_SECRET=${TWITTER_ACCESS_TOKEN_SECRET}
      - FARCASTER_API_KEY=${FARCASTER_API_KEY}
      
      # Qloo Taste AI
      - QLOO_API_KEY=${QLOO_API_KEY:-}
      - QLOO_API_URL=${QLOO_API_URL:-}
      
      # Cache Configuration
      - CACHE_TTL_SHORT=${CACHE_TTL_SHORT:-300}
      - CACHE_TTL_MEDIUM=${CACHE_TTL_MEDIUM:-1800}
      - CACHE_TTL_LONG=${CACHE_TTL_LONG:-3600}
      
      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-true}
      
      # Feature Flags
      - ENABLE_LOGGING=${ENABLE_LOGGING:-true}
      - ENABLE_CORS=${ENABLE_CORS:-true}
      - ENABLE_COMPRESSION=${ENABLE_COMPRESSION:-false}
      
      # Performance
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE:-10mb}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30000}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30000}
    networks:
      - cultural-arbitrage
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Service  
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: web
    container_name: cultural-arbitrage-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://api:8000}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME:-Cultural Arbitrage Signal Engine}
      - NEXT_PUBLIC_APP_TAGLINE=${NEXT_PUBLIC_APP_TAGLINE:-Trade the trend before it trends — with taste‑powered alpha}
      - NEXT_PUBLIC_ENABLE_DEBUG=${NEXT_PUBLIC_ENABLE_DEBUG:-false}
      - NEXT_PUBLIC_DEFAULT_THEME=${NEXT_PUBLIC_DEFAULT_THEME:-dark}
    depends_on:
      api:
        condition: service_healthy
    networks:
      - cultural-arbitrage
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  cultural-arbitrage:
    driver: bridge
    name: cultural-arbitrage-network

# Optional: Add volumes for persistent data if needed
volumes:
  api_data:
    driver: local
  web_cache:
    driver: local